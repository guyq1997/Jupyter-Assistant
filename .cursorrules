# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities


# Scratchpad

## Current Task: Consolidate Web Server and Agent Code

Plan:
[X] 1. Analyze Code Structure
    - Identify duplicate code in web_server.py and agent.py ✓
    - Map out shared functionality ✓
    - Identify unique features in each file ✓

[X] 2. Refactor Server Components
    - Consolidate WebSocket handling ✓
    - Merge ConnectionManager functionality ✓
    - Unify CORS middleware setup ✓
    - Standardize logging configuration ✓

[X] 3. Refactor Agent Components
    - Move Agent class to separate file ✓
    - Clean up message handling ✓
    - Streamline tool calls processing ✓
    - Improve error handling ✓

[X] 4. Create Unified Server
    - Combine server startup logic ✓
    - Implement clean shutdown ✓
    - Add proper error handling ✓
    - Ensure all features are preserved ✓

[ ] 5. Testing
    - Test WebSocket connections
    - Test Agent functionality
    - Test error scenarios
    - Verify all original features work

Current Step: Ready for testing

Next Actions:
1. Start the unified server and test basic functionality
2. Test WebSocket connections and message handling
3. Test Agent interactions and tool calls

